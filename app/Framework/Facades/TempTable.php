<?php

namespace App\Framework\Facades;

use App\Framework\Services\TempTableService;
use Illuminate\Support\Facades\Facade;

/**
 * @method static static create(string $tableName, string|array $schema)
 * @method static static truncate()
 * @method static static drop() 
 * @method static static insert(array $data)
 * @method static static update(array $where, array $data)
 * @method static static delete(array $where)
 * @method static \Illuminate\Support\Collection get()
 * @method static object|null first()
 * @method static bool exists()
 * @method static int count()
 * @method static \Illuminate\Database\Query\Builder query()
 * @method static static reset()
 * @method static static join(string $table, \Closure|string $first, ?string $operator = null, ?string $second = null, string $type = 'inner', bool $where = false)
 * @method static static leftJoin(string $table, string|\Closure $first, ?string $operator = null, ?string $second = null)
 * @method static static rightJoin(string $table, string|\Closure $first, ?string $operator = null, ?string $second = null)
 * @method static static crossJoin(string $table, ?string $first = null, ?string $second = null)
 * @method static static where(\Closure|string|array $column, mixed $operator = null, mixed $value = null, string $boolean = 'and')
 * @method static static orWhere(\Closure|string|array $column, mixed $operator = null, mixed $value = null)
 * @method static static whereNot(\Closure|string|array $column, mixed $operator = null, mixed $value = null, string $boolean = 'and')
 * @method static static orWhereNot(\Closure|string|array $column, mixed $operator = null, mixed $value = null)
 * @method static static whereColumn(string|array $first, ?string $operator = null, ?string $second = null, ?string $boolean = 'and')
 * @method static static orWhereColumn(string|array $first, ?string $operator = null, ?string $second = null)
 * @method static static whereIn(string $column, mixed $values, string $boolean = 'and', bool $not = false)
 * @method static static orWhereIn(string $column, mixed $values)
 * @method static static whereNotIn(string $column, mixed $values, string $boolean = 'and')
 * @method static static orWhereNotIn(string $column, mixed $values)
 * @method static static whereNull(string|array $columns, string $boolean = 'and', bool $not = false)
 * @method static static orWhereNull(string $column)
 * @method static static whereNotNull(string|array $columns, string $boolean = 'and')
 * @method static static orWhereNotNull(string $column)
 * @method static static whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)
 * @method static static orWhereBetween(string $column, array $values)
 * @method static static whereNotBetween(string $column, array $values, string $boolean = 'and')
 * @method static static orWhereNotBetween(string $column, array $values)
 * @method static static whereDate(string $column, string $operator, \DateTimeInterface|string|null $value = null, string $boolean = 'and')
 * @method static static orWhereDate(string $column, string $operator, \DateTimeInterface|string|null $value = null)
 * @method static static whereTime(string $column, string $operator, \DateTimeInterface|string|null $value = null, string $boolean = 'and')
 * @method static static orWhereTime(string $column, string $operator, \DateTimeInterface|string|null $value = null)
 * @method static static whereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value = null, string $boolean = 'and')
 * @method static static orWhereDay(string $column, string $operator, \DateTimeInterface|string|int|null $value = null)
 * @method static static whereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value = null, string $boolean = 'and')
 * @method static static orWhereMonth(string $column, string $operator, \DateTimeInterface|string|int|null $value = null)
 * @method static static whereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value = null, string $boolean = 'and')
 * @method static static orWhereYear(string $column, string $operator, \DateTimeInterface|string|int|null $value = null)
 * @method static static whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
 * @method static static orWhereExists(\Closure $callback, bool $not = false)
 * @method static static whereNotExists(\Closure $callback, string $boolean = 'and')
 * @method static static orWhereNotExists(\Closure $callback)
 * @method static static select(array|mixed $columns = ['*'])
 * @method static static selectSub(\Closure|\Illuminate\Database\Query\Builder|string $query, string $as)
 * @method static static selectRaw(string $expression, array $bindings = [])
 * @method static static addSelect(array|mixed $column)
 * @method static static distinct()
 * @method static static from(string $table, ?string $as = null)
 * @method static static orderBy(string $column, string $direction = 'asc')
 * @method static static orderByDesc(string $column)
 * @method static static orderByRaw(string $sql, array $bindings = [])
 * @method static static latest(string $column = 'created_at')
 * @method static static oldest(string $column = 'created_at')
 * @method static static inRandomOrder(?string $seed = null)
 * @method static static groupBy(array|string ...$groups)
 * @method static static groupByRaw(string $sql, array $bindings = [])
 * @method static static having(string $column, ?string $operator = null, ?string $value = null, string $boolean = 'and')
 * @method static static orHaving(string $column, ?string $operator = null, ?string $value = null)
 * @method static static havingRaw(string $sql, array $bindings = [], string $boolean = 'and')
 * @method static static orHavingRaw(string $sql, array $bindings = [])
 * @method static static limit(int $value)
 * @method static static take(int $value)
 * @method static static offset(int $value)
 * @method static static skip(int $value)
 * @method static static forPage(int $page, int $perPage = 15)
 * @method static static when(mixed $value, callable $callback, ?callable $default = null)
 * @method static static unless(mixed $value, callable $callback, ?callable $default = null)
 * @method static static union(\Illuminate\Database\Query\Builder|\Closure $query, bool $all = false)
 * @method static static unionAll(\Illuminate\Database\Query\Builder|\Closure $query)
 * @method static static intersect(\Illuminate\Database\Query\Builder|\Closure $query, bool $all = false)
 * @method static static intersectAll(\Illuminate\Database\Query\Builder|\Closure $query)
 * @method static static except(\Illuminate\Database\Query\Builder|\Closure $query, bool $all = false)
 * @method static static exceptAll(\Illuminate\Database\Query\Builder|\Closure $query)
 * @method static static lock(string|bool $value = true)
 * @method static static lockForUpdate()
 * @method static static sharedLock()
 * @method static static toSql()
 * @method static array getBindings()
 * @method static static addBinding(mixed $value, string $type = 'where')
 * @method static static setBindings(array $bindings, string $type = 'where')
 * @method static static mergeBindings(\Illuminate\Database\Query\Builder $query)
 * @method static array|object|null find(int|string $id, array $columns = ['*'])
 * @method static \Illuminate\Support\Collection|array findMany(array $ids, array $columns = ['*'])
 * @method static object|null value(string $column)
 * @method static array pluck(string $column, ?string $key = null)
 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int $perPage = 15, array $columns = ['*'], string $pageName = 'page', ?int $page = null)
 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage = 15, array $columns = ['*'], string $pageName = 'page', ?int $page = null)
 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(?int $perPage = 15, array $columns = ['*'], string $cursorName = 'cursor', ?\Illuminate\Pagination\Cursor $cursor = null)
 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize = 1000)
 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize = 1000, ?string $column = null, ?string $alias = null)
 * @method static bool chunk(int $count, callable $callback)
 * @method static bool chunkById(int $count, callable $callback, ?string $column = null, ?string $alias = null)
 * @method static bool each(callable $callback, int $count = 1000)
 * @method static bool eachById(callable $callback, int $count = 1000, ?string $column = null, ?string $alias = null)
 * @method static mixed sum(string $column)
 * @method static mixed avg(string $column)
 * @method static mixed average(string $column)
 * @method static mixed min(string $column)
 * @method static mixed max(string $column)
 * @method static mixed aggregate(string $function, array $columns = ['*'])
 * @method static float|int numericAggregate(string $function, array $columns = ['*'])
 * @method static bool insertOrIgnore(array $values)
 * @method static bool insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
 * @method static int updateOrInsert(array $attributes, array $values = [])
 * @method static bool upsert(array $values, array|string $uniqueBy, ?array $update = null)
 * @method static int increment(string $column, float|int $amount = 1, array $extra = [])
 * @method static int decrement(string $column, float|int $amount = 1, array $extra = [])
 *
 * @mixin \App\Services\TempTable\TempTableService
 * @see \App\Services\TempTable\TempTableService
 */
class TempTable extends Facade
{

    protected static function getFacadeAccessor(): string
    {
        return TempTableService::class;
    }
}
